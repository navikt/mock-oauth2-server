name: Publish release

on:
  release:
    types: [published]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  publish-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2.3.1
        with:
          java-version: 11
          distribution: 'zulu'

      - name: Setup build cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle wrapper cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_KEYS: ${{ secrets.GPG_KEYS }}
          GPG_KEY_NAME: ${{ secrets.GPG_KEY_NAME }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

        # The GITHUB_REF tag comes in the format 'refs/tags/xxx'.
        # So if we split on '/' and take the 3rd value, we can get the release name.
        run: |
          export GPG_TTY=$(tty) && echo "$GPG_KEYS" | gpg --fast-import --batch
          NEW_VERSION=$(echo "${GITHUB_REF}" | cut -d "/" -f3)
          IMAGE=${IMAGE_NAME}:${NEW_VERSION}
          echo "Releasing new version ${NEW_VERSION} of $IMAGE"
          ./gradlew -Pversion=${NEW_VERSION} publish closeAndReleaseRepository -Dorg.gradle.internal.publish.checksums.insecure=true --info
          ./gradlew jibDockerBuild --image="${IMAGE}"
          docker push "${IMAGE}"

